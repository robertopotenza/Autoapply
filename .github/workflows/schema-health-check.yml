name: Weekly Schema Health Check

# Runs weekly on Mondays at 3:00 AM UTC
on:
  schedule:
    - cron: '0 3 * * 1'
  # Allow manual trigger
  workflow_dispatch:

jobs:
  schema-health-check:
    name: Schema Verification & Documentation Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run schema verification
        id: verify-schema
        run: |
          echo "🔍 Running schema verification..."
          node scripts/verify-screening-schema.js > schema-report.txt 2>&1
          exit_code=$?
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          if [ $exit_code -ne 0 ]; then
            echo "❌ Schema verification failed"
            exit 1
          fi
          echo "✅ Schema verification passed"
        continue-on-error: true
      
      - name: Run documentation audit
        id: audit-docs
        run: |
          echo "📚 Running documentation audit..."
          npm run docs:audit > audit-report.txt 2>&1
          exit_code=$?
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          if [ $exit_code -ne 0 ]; then
            echo "❌ Documentation audit failed"
            exit 1
          fi
          echo "✅ Documentation audit passed"
        continue-on-error: true
      
      - name: Generate combined report
        if: always()
        run: |
          echo "# Weekly Schema Health Report" > combined-report.md
          echo "" >> combined-report.md
          echo "**Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> combined-report.md
          echo "**Workflow Run:** ${{ github.run_number }}" >> combined-report.md
          echo "" >> combined-report.md
          
          echo "## Schema Verification" >> combined-report.md
          echo "" >> combined-report.md
          if [ "${{ steps.verify-schema.outputs.exit_code }}" == "0" ]; then
            echo "✅ **Status:** PASSED" >> combined-report.md
          else
            echo "❌ **Status:** FAILED" >> combined-report.md
          fi
          echo "" >> combined-report.md
          echo "### Details" >> combined-report.md
          echo "\`\`\`" >> combined-report.md
          cat schema-report.txt >> combined-report.md
          echo "\`\`\`" >> combined-report.md
          echo "" >> combined-report.md
          
          echo "## Documentation Audit" >> combined-report.md
          echo "" >> combined-report.md
          if [ "${{ steps.audit-docs.outputs.exit_code }}" == "0" ]; then
            echo "✅ **Status:** PASSED" >> combined-report.md
          else
            echo "❌ **Status:** FAILED" >> combined-report.md
          fi
          echo "" >> combined-report.md
          echo "### Details" >> combined-report.md
          echo "\`\`\`" >> combined-report.md
          cat audit-report.txt >> combined-report.md
          echo "\`\`\`" >> combined-report.md
          echo "" >> combined-report.md
          
          echo "---" >> combined-report.md
          echo "" >> combined-report.md
          echo "**Generated by:** [Weekly Schema Health Check Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> combined-report.md
      
      - name: Upload schema health report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: schema-health-report-${{ github.run_number }}
          path: |
            combined-report.md
            schema-report.txt
            audit-report.txt
          retention-days: 90
      
      - name: Check for failures
        if: always()
        run: |
          schema_exit="${{ steps.verify-schema.outputs.exit_code }}"
          audit_exit="${{ steps.audit-docs.outputs.exit_code }}"
          
          if [ "$schema_exit" != "0" ] || [ "$audit_exit" != "0" ]; then
            echo "❌ Schema health check failed!"
            echo ""
            echo "Schema verification: $([ "$schema_exit" == "0" ] && echo "✅ PASSED" || echo "❌ FAILED")"
            echo "Documentation audit: $([ "$audit_exit" == "0" ] && echo "✅ PASSED" || echo "❌ FAILED")"
            echo ""
            echo "Please review the uploaded artifacts for details."
            exit 1
          fi
          
          echo "✅ All checks passed!"
      
      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = '⚠️ Weekly Schema Health Check Failed';
            const body = `The weekly schema health check has detected issues:
            
            **Workflow Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Date:** ${new Date().toISOString()}
            
            ### Status
            - Schema Verification: ${{ steps.verify-schema.outputs.exit_code == '0' ? '✅ Passed' : '❌ Failed' }}
            - Documentation Audit: ${{ steps.audit-docs.outputs.exit_code == '0' ? '✅ Passed' : '❌ Failed' }}
            
            ### Next Steps
            1. Download the [schema health report artifact](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Review the \`combined-report.md\` for detailed failure information
            3. Fix any schema drift or documentation inconsistencies
            4. Run verification locally:
               \`\`\`bash
               node scripts/verify-screening-schema.js
               npm run docs:audit
               \`\`\`
            
            ### Possible Causes
            - Database schema changes without documentation updates
            - Migration files added/modified without verification
            - Documentation files referencing outdated schema
            - Missing or incorrect JSDoc comments
            
            This issue was automatically created by the weekly schema health check workflow.`;
            
            // Check if an open issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['schema-health', 'automated']
            });
            
            const existingIssue = issues.data.find(issue => issue.title === title);
            
            if (existingIssue) {
              // Update existing issue with new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `**Update:** Schema health check failed again.\n\n${body}`
              });
              console.log('Updated existing issue:', existingIssue.number);
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['schema-health', 'automated', 'bug']
              });
              console.log('Created new issue:', issue.data.number);
            }
