name: Performance Alerts

# Run daily at 4 AM UTC
on:
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  analyze-performance:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download logs from production
        if: false # Disabled - requires production log access
        run: |
          # This would download logs from your production environment
          # Example with Railway CLI:
          # railway logs --json > logs/combined.log
          echo "Log download not configured - using local logs"

      - name: Analyze performance logs
        env:
          ALERTS_ENABLED: ${{ secrets.ALERTS_ENABLED || 'false' }}
          ALERTS_SLACK_WEBHOOK: ${{ secrets.ALERTS_SLACK_WEBHOOK }}
          ALERTS_THRESHOLD_MS: ${{ secrets.ALERTS_THRESHOLD_MS || '500' }}
        run: |
          node scripts/analyze-performance-logs.js --output=performance-report.json

      - name: Upload analysis report
        uses: actions/upload-artifact@v4
        with:
          name: performance-analysis-${{ github.run_id }}
          path: reports/performance-report.json
          retention-days: 30

      - name: Check for critical anomalies
        id: check-anomalies
        run: |
          # Check if anomalies file exists and has critical issues
          if [ -f reports/performance-report.json ]; then
            ANOMALY_COUNT=$(jq '.totalAnomalies' reports/performance-report.json)
            echo "anomaly_count=$ANOMALY_COUNT" >> $GITHUB_OUTPUT
            
            if [ "$ANOMALY_COUNT" -gt 10 ]; then
              echo "critical=true" >> $GITHUB_OUTPUT
            else
              echo "critical=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "anomaly_count=0" >> $GITHUB_OUTPUT
            echo "critical=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub issue for critical anomalies
        if: steps.check-anomalies.outputs.critical == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('reports/performance-report.json', 'utf8'));
            
            const topAnomalies = report.anomalies
              .slice(0, 10)
              .map(a => `- \`${a.route}\` - ${a.durationMs.toFixed(0)}ms - ${a.reasons[0]}`)
              .join('\n');
            
            const issueBody = `## 🚨 Performance Anomalies Detected
            
            **Analysis Date:** ${report.timestamp}
            **Total Metrics:** ${report.totalMetrics}
            **Anomalies Found:** ${report.totalAnomalies}
            
            ### Top Anomalies
            ${topAnomalies}
            
            ### Thresholds
            - Duration: ${report.thresholds.durationMs}ms
            - DB Time: ${report.thresholds.dbTimeMs}ms
            - Spike Multiplier: ${report.thresholds.spikeMultiplier}x
            
            ### Action Required
            Review the performance logs and investigate slow routes. The full report is attached as a workflow artifact.
            
            **Artifact:** [performance-analysis-${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Performance Alert: ${report.totalAnomalies} anomalies detected`,
              body: issueBody,
              labels: ['performance', 'alert', 'automated']
            });

      - name: Summary
        run: |
          echo "### Performance Analysis Complete 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f reports/performance-report.json ]; then
            echo "- **Total Metrics:** $(jq '.totalMetrics' reports/performance-report.json)" >> $GITHUB_STEP_SUMMARY
            echo "- **Anomalies:** $(jq '.totalAnomalies' reports/performance-report.json)" >> $GITHUB_STEP_SUMMARY
            echo "- **Report:** Available as artifact" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No report generated - check logs" >> $GITHUB_STEP_SUMMARY
          fi
